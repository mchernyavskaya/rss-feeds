<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:georss="http://www.georss.org/georss"
        xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
        xmlns:media="http://search.yahoo.com/mrss/">

    <channel>
        <title>With content:encoded field.</title>
        <link>https://raw.githubusercontent.com/ilya40umov/rss-feeds/master/content-encoded-rss-no-valid-link.xml</link>
        <description>An RSS feed with content:encoded and invalid links.</description>
        <lastBuildDate>Fri, 30 Jan 2015 00:00:01 +0000</lastBuildDate>
        <language>en-US</language>
        <sy:updatePeriod>yearly</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>
        
        <item>
		<title>Mac OS, IntelliJ IDEA 14 on JDK 1.7 with SVN and GIT</title>
		<comments>http://ilya40umov.com/2014/11/30/mac-os-intellij-idea-14-svn-and-git-and-jdk-1-7/#comments</comments>
		<pubDate>Sun, 30 Nov 2014 21:37:27 +0000</pubDate>
		<dc:creator><![CDATA[ilya40umov]]></dc:creator>
				<category><![CDATA[Intellij IDEA]]></category>
		<category><![CDATA[GIT]]></category>
		<category><![CDATA[MacOS]]></category>
		<category><![CDATA[SVN]]></category>

		<guid isPermaLink="false">mac-os-intellij-idea-14-svn-and-git-and-jdk-1-7</guid>
		<description><![CDATA[This time I&#8217;ve decided to write a bit more on the whole &#8220;setting up the dev environment on Mac OS&#8221; thing. Primarily, I&#8217;m going to focus on setting up IntelliJ IDEA running on JDK 1.7 with SVN and GIT as version control &#8230; <a href="http://ilya40umov.com/2014/11/30/mac-os-intellij-idea-14-svn-and-git-and-jdk-1-7/">Continue reading <span class="meta-nav">&#8594;</span></a><img alt="" border="0" src="http://pixel.wp.com/b.gif?host=ilya40umov.com&#038;blog=47779055&#038;post=148&#038;subd=ilya40umov&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p><a href="https://ilya40umov.files.wordpress.com/2014/11/00311910_medium.jpeg"><img class="alignnone size-medium wp-image-151" src="https://ilya40umov.files.wordpress.com/2014/11/00311910_medium.jpeg?w=300&#038;h=224" alt="00311910_medium" width="300" height="224" /></a></p>
<p>This time I&#8217;ve decided to write a bit more on the whole &#8220;setting up the dev environment on Mac OS&#8221; thing. Primarily, I&#8217;m going to focus on setting up IntelliJ IDEA running on JDK 1.7 with SVN and GIT as version control system of choice. (BTW I&#8217;ve recently wrote <strong><a href="http://ilya40umov.com/2014/11/11/intellij-idea-13-on-macos-with-jdk-1-7/">IntelliJ IDEA 13 on MacOS with JDK 1.7</a></strong> but that post only touched a one of the problems I faced and that solution didn&#8217;t last long.)</p>
<p>So, Problem #1 you are going to face if you&#8217;ve got JDK 1.7 installed on your Mac(<em>and since JDK 1.7 is target platform for any code I write these days, it&#8217;s quite reasonable to have it installed on my dev machine as well</em>) and would like to start IntelliJ IDEA is that IDEA is by default packaged in a way that it only can be started on JDK1.6.</p>
<p>The solution to this problem that is suggested by many on the web is that you have to edit <strong>/Applications/IntelliJ\ IDEA\ 14.app/Contents/Info.plist</strong> and change JVMVersion from 1.6* to 1.7*. This will allow you to start the IDE but by altering a file inside .app you are actually breaking a signature on the application and OS will not trust it henceforth.</p>
<p>A simple solution which may help with Mac OS being vigilant/paranoid consists of running the following single command in your terminal:</p>
<p><code>sudo codesign -f -s – /Applications/IntelliJ\ IDEA\ 13.app</code></p>
<p>So, again keeping the app signed with a valid signature is important because otherwise IDEA may not be able to work with other OS tools like Keychain. If the command I provided does not help and further on you face issues with IDEA not saving passwords for SVN, you may also try the solution mentioned in the comments <a href="http://blog.jetbrains.com/idea/2013/09/jdk7_compatibility/">here</a> by Jeroen which requires generating a new cert and signing IDEA&#8217;s app with it.</p>
<p>Anyway, now after you&#8217;ve got your favorite IDE running, you might want to checkout/clone your code from SVN/GIT to work with it. I personally have found that both SVN and GIT clients that go along with Mac OS are somewhat outdated. This is why I suggest installing latest version using <a href="http://brew.sh">Homebrew</a> which is a really awesome tool. After getting Homebrew and using it to install newest GIT/SVN clients you should be ready to proceed further down this article.</p>
<p>In case if you went with SVN, when you first use console client to access your remote repo, Keychain will allow you to save your user/password in it. Then next time when you checkout from your repo in console or do any task that requires authentication, Keychain will ask if you wish to let SVN access the password. You <strong>should</strong> click &#8220;<strong>Always Allow</strong>&#8221; in the dialog. This is needed if you wish IDEA to be able to get this password from keychain as well.</p>
<p>So, the key note here, is that you should first use console SVN(and GIT) client and make sure you are able to do checkout/pull before moving forward.</p>
<p>In your IntelliJ IDEA you should go into &#8220;<em>Preferences</em> -&gt; <em>Version Control</em> -&gt; <em>Subversion&#8221;</em> and you should set &#8220;Use command line client&#8221; and set it to &#8220;<code>/usr/local/bin/svn</code>&#8220;(this is actually what &#8220;<code>which svn</code>&#8221; should return to you if you run it in terminal).</p>
<p>All these steps are primarily needed if you want your IDEA to be able to work with the SVN repos without asking for user/password every time you restart it(which I find super annoying).</p>
<p>For GIT I suggest using the following settings: &#8220;<em>Path to Git executable</em>&#8221; should be set to &#8220;<code>/usr/local/bin/git</code>&#8221; and &#8220;<em>SSH executable</em>&#8221; should be chosen as &#8220;Native&#8221;. With these setting your IDEA should be able to rely to Mac OS built-in ssh-agent that is capable of using Keychain for storing pass-phases of your SSH keys besides agent built into IntelliJ will only try to use the first ssh key from your .ssh directory when you can have several(e.g. one for GitHub, one for BitBucket and one for accessing your Linux servers).</p>
<p>You can find extra info on working with SSH keys and Keychain <a href="https://help.github.com/articles/working-with-ssh-key-passphrases/#os-x-keychain">here</a>. The bottom line again is that you should first set things up in Terminal and then when you can run all your commands in console smoothly IDEA with the aforementioned settings should have no issues with accessing your repo.</p>
<p>So, the biggest benefit that I got out of figuring how to set all these settings is that now I do not need to enter passwords/pass-phases/master-passwords every time I try to pull/checkout new updates from remote repositories and at the same time I do not need to worry about my passwords stored in insecure way somewhere on disc. Good luck!</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/ilya40umov.wordpress.com/148/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ilya40umov.wordpress.com/148/" /></a> <img alt="" border="0" src="http://pixel.wp.com/b.gif?host=ilya40umov.com&#038;blog=47779055&#038;post=148&#038;subd=ilya40umov&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
			<wfw:commentRss>http://ilya40umov.com/2014/11/30/mac-os-intellij-idea-14-svn-and-git-and-jdk-1-7/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
	
		<media:content url="http://2.gravatar.com/avatar/5e32552721127ac008ab6e33279f71c8?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">ilya40umov</media:title>
		</media:content>

		<media:content url="https://ilya40umov.files.wordpress.com/2014/11/00311910_medium.jpeg?w=300" medium="image">
			<media:title type="html">00311910_medium</media:title>
		</media:content>
	</item>
		<item>
		<title>IntelliJ IDEA 13 on MacOS with JDK 1.7</title>
		<link>intellij-idea-13-on-macos-with-jdk-1-7/</link>
		<comments>http://ilya40umov.com/2014/11/11/intellij-idea-13-on-macos-with-jdk-1-7/#comments</comments>
		<pubDate>Tue, 11 Nov 2014 10:20:02 +0000</pubDate>
		<dc:creator><![CDATA[ilya40umov]]></dc:creator>
				<category><![CDATA[Intellij IDEA]]></category>
		<category><![CDATA[MacOS]]></category>

		<description><![CDATA[When I first installed Intellij IDEA on my Mac, I immediately faced a problem that by default Intellij for Mac requires to be run on JDK 1.6. Thus, in order to make it work on JDK 1.7 which I installed &#8230; <a href="http://ilya40umov.com/2014/11/11/intellij-idea-13-on-macos-with-jdk-1-7/">Continue reading <span class="meta-nav">&#8594;</span></a><img alt="" border="0" src="http://pixel.wp.com/b.gif?host=ilya40umov.com&#038;blog=47779055&#038;post=140&#038;subd=ilya40umov&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p>When I first installed Intellij IDEA on my Mac, I immediately faced a problem that by default Intellij for Mac requires to be run on JDK 1.6.</p>
<p>Thus, in order to make it work on JDK 1.7 which I installed prior to downloading Intellij, I had to edit <strong>/Applications/IntelliJ\ IDEA\ 13.app/Contents/Info.plist</strong> and change JVMVersion from 1.6* to 1.7*.</p>
<p>This solution worked for me fine up until I realized that something was wrong with SVN support which required to re-enter the password every time IDEA was restarted. I&#8217;ve checked quite a few sources to find a solution to this problem and it turned out that editing plist file breaks code signature and MacOS starts acting suspicious of the app, hence not allowing it to access Keychain.</p>
<p>The solution for the latter problem is the following command which solves the problem entirely:</p>
<p><strong>sudo codesign -f -s &#8211; /Applications/IntelliJ\ IDEA\ 13.app</strong></p>
<p>So, the final solution looks like this:</p>
<p>1) download and install IDEA</p>
<p>2) update Info.plist so that it works with JDK 1.7</p>
<p>3) sign IntelliJ IDEA xx.app back by coding</p>
<p>P.S. Tested on MBP with MacOS Yosemite</p>
<p>P.S.S. Most of this info can be found here: <a href="http://blog.jetbrains.com/idea/2013/09/jdk7_compatibility/">http://blog.jetbrains.com/idea/2013/09/jdk7_compatibility/</a></p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/ilya40umov.wordpress.com/140/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ilya40umov.wordpress.com/140/" /></a> <img alt="" border="0" src="http://pixel.wp.com/b.gif?host=ilya40umov.com&#038;blog=47779055&#038;post=140&#038;subd=ilya40umov&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
			<wfw:commentRss>http://ilya40umov.com/2014/11/11/intellij-idea-13-on-macos-with-jdk-1-7/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
	
		<media:content url="http://2.gravatar.com/avatar/5e32552721127ac008ab6e33279f71c8?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">ilya40umov</media:title>
		</media:content>
	</item>
		<item>
		<title>Seven features of MongoDB which can impact your design</title>
		<link>http://ilya40umov.com/2013/03/22/seven-features-of-mongodb-which-can-impact-your-design/</link>
		<comments>http://ilya40umov.com/2013/03/22/seven-features-of-mongodb-which-can-impact-your-design/#comments</comments>
		<pubDate>Fri, 22 Mar 2013 16:12:42 +0000</pubDate>
		<dc:creator><![CDATA[ilya40umov]]></dc:creator>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Cloud]]></category>
		<category><![CDATA[NoSQL]]></category>

		<guid isPermaLink="false">http://ilya40umov.wordpress.com/?p=99</guid>
		<description><![CDATA[Suppose your company, your team or just you have decided to try out MongoDB in your next project. Hopefully you&#8217;ve done some analysis on the matter and Mongo indeed fits best this new project(If you are still uncertain you might want &#8230; <a href="http://ilya40umov.com/2013/03/22/seven-features-of-mongodb-which-can-impact-your-design/">Continue reading <span class="meta-nav">&#8594;</span></a><img alt="" border="0" src="http://pixel.wp.com/b.gif?host=ilya40umov.com&#038;blog=47779055&#038;post=99&#038;subd=ilya40umov&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p><a href="http://ilya40umov.files.wordpress.com/2013/03/pitfalls.jpg"><img class="size-full wp-image-105 aligncenter" alt="pitfalls" src="http://ilya40umov.files.wordpress.com/2013/03/pitfalls.jpg?w=584"   /></a></p>
<p>Suppose your company, your team or just you have decided to try out MongoDB in your next project. Hopefully you&#8217;ve done some analysis on the matter and Mongo indeed fits best this new project(If you are still uncertain you might want to look into <a href="http://ilya40umov.wordpress.com/2013/03/05/considerations-for-choosing-or-not-choosing-mongodb/">the following blog post</a>). Almost certainly you and your team are going to read quite a lot of information regarding how MongoDB works and how you can/should/should not work with it(By the way, if you are indeed new to MongoDB, I would recommend you signing up for <a href="http://education.10gen.com">free classes from 10gen</a>, which can give you a good start). Unfortunately one&#8217;s mind is not always capable of memorizing everything on the fly and you can simply miss important details while reading docs in the first place. This is why in this blog post I&#8217;m going to cover some peculiar features of MongoDB which you should probably know before designing your application or at least before going with it into production.</p>
<p><strong style="font-style:inherit;line-height:1.625;">Full Field Names VS Shortened Aliases</strong></p>
<p>I myself was quite surprised first when I read this, but it&#8217;s actually true: in MongoDB it&#8217;s not just your data that takes space, but also field names from each document you store. It basically happens because of MongoDB&#8217;s schema-less nature and the fact that it stores documents in <a href="http://bsonspec.org/">BSON</a>. It may appear to be not as bad as you might imagine, but nevertheless this is the reason why many project have chosen to use shortened aliases instead of full field names.</p>
<p>In my opinion the decision of using shortened aliases should be based primarily on your application schema. If you see that your tables mostly contain numbers(e.g. measurements, metrics, analytics) then having a 20-characters name for a field with 4 bytes of data stored in it, is definitely going to be a big overhead. On the other hand if you plan to store a lot of text/binary data in your collections, than it won&#8217;t probably matter if the field names can occupy 3% of your database size.</p>
<p><strong><span style="font-style:inherit;line-height:1.625;">Fault Tolerance Is In Your Hands</span></strong></p>
<p>You should always strive for highest fault tolerance possible. That&#8217;s one of the obvious things you learn very early in your carrier as a software engineer. Everyone wants their solution to be reliable and stable etc. etc. With MongoDB your code should be wary of certain exceptional situations, such as network exceptions, master re-elections, possibility data losses(indeed possible if you write in fire-and-forget mode, which is very fast but as far as you can see far from perfect) etc. In some edge and extremely rare cases Mongo Driver can even return a failure to your write operation which actually succeeded(this is because your write and Mongo&#8217;s <strong><em>getLastError</em></strong> are two separate commands sent over the network).</p>
<p>Anyway what I&#8217;m trying to say here is that you should really implement some kind of retries logic where it&#8217;s possible(e.g. for exception which are transient by nature) and a trade-off between performance and safety. By the way, this can be a good place to practice in AOP or reuse some of existing libraries(I know <a href="http://static.springsource.org/spring-batch/">Spring Batch</a> and <a href="http://www.springsource.org/spring-integration">Spring Integration</a> both have retries mechanisms).</p>
<p><strong>Read/Write Contention</strong></p>
<p>You are probably not going to notice it at first glace, but actually your write/read operations will content between each other, even if they were meant to access different documents and even different collections. In a nutshell, Mongo has a single read-write lock per database, which means that only single write can be running on a whole database and all reads addressed to master node will have to wait. (If you wish you can read more on this in the <a href="http://docs.mongodb.org/manual/faq/concurrency/">online docs</a> from 10gen.) This is one of the key reasons why you should consider reading from slaves whenever possible.</p>
<p><strong><span style="font-style:inherit;line-height:1.625;">Eventual Consistency Is Real</span></strong></p>
<p>Be pessimistic and read from primary by default. This is what I can suggest. Eventual consistency is real with Mongo and the lag between secondaries and your master can be from 1-2 sec to several minutes(or even more depending on your configuration and write traffic). This is why you should read from secondaries only when you are 100% percent sure that you are OK with stale data or you are sure that your write is there(this can be achieved via WriteConcern.ALL, which is quite slow and may fail if one of the nodes is down).</p>
<p>Should I tell you what can happen if you are too optimistic and read stale data when you needed the latest one? Well. You can get an NPE in your code while trying to read an object which you&#8217;ve just inserted or an end-user of your app can find her new blog post or order missing right after she added it.</p>
<p>Being pessimistic does not sound too pragmatic. What if you want to get better performance/throughput through offloading some of your reads from the master? The answer is obvious: in this case your app should keep some state(either in http session or cache, or clustered data grid etc.). This state may consists of the newly created/updated data so that you don&#8217;t need to look for it in DB. Alternatively you can keep a time-stamp of last data modification done by the user in her session and use it for choosing between reading from master or secondaries. The key point here is that you will need to handle this problem in your application code, and thus should take care of it during the design phase.</p>
<p><strong>Concurrent Access Is Not A Joke</strong></p>
<p>The problem of concurrent access(e.g. data races, race conditions etc.) does not exclusively belong to MongoDB but <span style="font-style:inherit;line-height:1.625;">without ACID transactions (where you could use a transaction isolation level to lock some rows), SELECT FOR UPDATE statements and the other features available RDBMSes you are going to have only a few options to overcome the problem of concurrent access to your data.</span></p>
<p>First of all you can ignore the fact that concurrent access/modification can occur. Applications in certain domains can simply tolerate cases when the last user to update the row is the one whose data will be there. In addition to this option you can use operations like $set, $push, $inc which allow to modify only a part of document which you are interested in.  Less contention means less chances to have problems with concurrency.</p>
<p>The second option is the usage of findAndModify command paired with optimistic locking(an approach when you have a version field in each document which is used to ensure that the data has not changed between read and write). Taking into account that operations on a single document are atomic in MongoDB this approach can really help you to tackle concurrency inside one document.</p>
<p>The last option, which by the way allows to deal with concurrent modifications on multiple documents, is application level locking. This is indeed the last option which should be used with great caution, because poorly implemented, it can give you an incredibly bad performance and a possibility of deadlocks.</p>
<p><strong>Be Prepared For Sharding</strong></p>
<p>When you choose MongoDB to be your primary storage, you should immediately go through your future collections and determine the once which are either very write heavy or can grow indefinitely(e.g. historical data). Those are very good candidates for <a href="http://docs.mongodb.org/manual/faq/sharding/">sharding</a> and it means that you should a) determine your sharded key b) ideally, use this key in all  queries to this collection c) be ready that uniqueness constraints on sharded collections are harder to maintain(if you want to have a unique field other than sharded key, you will probably have to use a separate collection to do this. See this <a href="http://docs.mongodb.org/manual/tutorial/enforce-unique-keys-for-sharded-collections/">link</a> for more details.)</p>
<p><strong><span style="font-style:inherit;line-height:1.625;">Aggregation Queries Are Still Not A Piece Of Cake</span></strong></p>
<p>Even though MongoDB provides this nice feature called Aggregation Framework which is meant to reduce need in Map-Reduce facility, you are still going to face quite a lot of challenges with data aggregation for reports or various analytics. First of all Aggregation Framework is not so easy to work with as SQL, second of all it may still require you to pre-collect some data into additional collections(because there are limit to what you can do in a query)and the last thing to remember that a complicated aggregation query can run a significant amount of time on your data set. For example in my case an aggregation query which consists of 7 steps can run about 1 minute on a collection with several millions of entries.</p>
<p>This is why I suggest you testing the performance of your aggregation queries on a dummy data set before going into production and consider adding more fields/collections with pre-calculated figures for your analytics.</p>
<p><strong>Looking for more details</strong></p>
<p>If you&#8217;ve realized that your current architecture for MongoDB is not ideal, or you are looking for more information related to Mongo limitations, I would suggest you reading <a href="http://docs.mongodb.org/manual/reference/limits/">10gen docs</a> and probably <a href="http://blog.engineering.kiip.me/post/20988881092/a-year-with-mongodb">this blog post</a> too. And ff you know more good sources, don&#8217;t hesitate to leave them in comments.</p>
<p><strong><span style="font-style:inherit;line-height:1.625;">Summary</span></strong></p>
<p>Hopefully in this post I managed to cover most of the design gotchas you might encounter with MongoDB. The bottom line though is that any NoSQL solution has its pros and cons, and you should either be ready to overcome them in your design or look for a solution which fits your particular use-case better.</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/ilya40umov.wordpress.com/99/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/ilya40umov.wordpress.com/99/" /></a> <img alt="" border="0" src="http://pixel.wp.com/b.gif?host=ilya40umov.com&#038;blog=47779055&#038;post=99&#038;subd=ilya40umov&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
			<wfw:commentRss>http://ilya40umov.com/2013/03/22/seven-features-of-mongodb-which-can-impact-your-design/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
	
		<media:content url="http://2.gravatar.com/avatar/5e32552721127ac008ab6e33279f71c8?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">ilya40umov</media:title>
		</media:content>

		<media:content url="http://ilya40umov.files.wordpress.com/2013/03/pitfalls.jpg" medium="image">
			<media:title type="html">pitfalls</media:title>
		</media:content>
	</item>
        
    </channel>

</rss>
